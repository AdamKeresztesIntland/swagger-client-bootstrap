/*
 * codeBeamer swagger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.intland.swagger.client.api;

import com.intland.swagger.client.ApiCallback;
import com.intland.swagger.client.ApiClient;
import com.intland.swagger.client.ApiException;
import com.intland.swagger.client.ApiResponse;
import com.intland.swagger.client.Configuration;
import com.intland.swagger.client.Pair;
import com.intland.swagger.client.ProgressRequestBody;
import com.intland.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.intland.swagger.client.model.BatchGetTrackerItemReviewsRequest;
import com.intland.swagger.client.model.ExportProject;
import java.io.File;
import com.intland.swagger.client.model.TrackerItem;
import com.intland.swagger.client.model.TrackerItemWithTrackerItemReviewsExport;
import com.intland.swagger.client.model.TrackerItemsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportApi {
    private ApiClient localVarApiClient;

    public ExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for batchGetTrackerItemReviews
     * @param batchGetTrackerItemReviewsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call batchGetTrackerItemReviewsCall(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchGetTrackerItemReviewsRequest;

        // create path and map variables
        String localVarPath = "/v3/export/tracker-item-reviews";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGetTrackerItemReviewsValidateBeforeCall(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = batchGetTrackerItemReviewsCall(batchGetTrackerItemReviewsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get tracker item reviews by a list of tracker item IDs
     * 
     * @param batchGetTrackerItemReviewsRequest  (optional)
     * @return List&lt;TrackerItemWithTrackerItemReviewsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrackerItemWithTrackerItemReviewsExport> batchGetTrackerItemReviews(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest) throws ApiException {
        ApiResponse<List<TrackerItemWithTrackerItemReviewsExport>> localVarResp = batchGetTrackerItemReviewsWithHttpInfo(batchGetTrackerItemReviewsRequest);
        return localVarResp.getData();
    }

    /**
     * Get tracker item reviews by a list of tracker item IDs
     * 
     * @param batchGetTrackerItemReviewsRequest  (optional)
     * @return ApiResponse&lt;List&lt;TrackerItemWithTrackerItemReviewsExport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrackerItemWithTrackerItemReviewsExport>> batchGetTrackerItemReviewsWithHttpInfo(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest) throws ApiException {
        okhttp3.Call localVarCall = batchGetTrackerItemReviewsValidateBeforeCall(batchGetTrackerItemReviewsRequest, null);
        Type localVarReturnType = new TypeToken<List<TrackerItemWithTrackerItemReviewsExport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker item reviews by a list of tracker item IDs (asynchronously)
     * 
     * @param batchGetTrackerItemReviewsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call batchGetTrackerItemReviewsAsync(BatchGetTrackerItemReviewsRequest batchGetTrackerItemReviewsRequest, final ApiCallback<List<TrackerItemWithTrackerItemReviewsExport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGetTrackerItemReviewsValidateBeforeCall(batchGetTrackerItemReviewsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItemWithTrackerItemReviewsExport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for export
     * @param projectId  (required)
     * @param exportProject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call exportCall(Integer projectId, ExportProject exportProject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = exportProject;

        // create path and map variables
        String localVarPath = "/v3/projects/{projectId}/content"
            .replaceAll("\\{" + "projectId" + "\\}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportValidateBeforeCall(Integer projectId, ExportProject exportProject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling export(Async)");
        }
        

        okhttp3.Call localVarCall = exportCall(projectId, exportProject, _callback);
        return localVarCall;

    }

    /**
     * Exports the specified project to a zip file
     * 
     * @param projectId  (required)
     * @param exportProject  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File export(Integer projectId, ExportProject exportProject) throws ApiException {
        ApiResponse<File> localVarResp = exportWithHttpInfo(projectId, exportProject);
        return localVarResp.getData();
    }

    /**
     * Exports the specified project to a zip file
     * 
     * @param projectId  (required)
     * @param exportProject  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> exportWithHttpInfo(Integer projectId, ExportProject exportProject) throws ApiException {
        okhttp3.Call localVarCall = exportValidateBeforeCall(projectId, exportProject, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exports the specified project to a zip file (asynchronously)
     * 
     * @param projectId  (required)
     * @param exportProject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call exportAsync(Integer projectId, ExportProject exportProject, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportValidateBeforeCall(projectId, exportProject, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrackerItems
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTrackerItemsCall(Integer baselineId, TrackerItemsRequest trackerItemsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trackerItemsRequest;

        // create path and map variables
        String localVarPath = "/v3/export/items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (baselineId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baselineId", baselineId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BasicAuth", "BearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackerItemsValidateBeforeCall(Integer baselineId, TrackerItemsRequest trackerItemsRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTrackerItemsCall(baselineId, trackerItemsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @return List&lt;TrackerItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TrackerItem> getTrackerItems(Integer baselineId, TrackerItemsRequest trackerItemsRequest) throws ApiException {
        ApiResponse<List<TrackerItem>> localVarResp = getTrackerItemsWithHttpInfo(baselineId, trackerItemsRequest);
        return localVarResp.getData();
    }

    /**
     * Get tracker items
     * API can be used for fetching basic information of tracker items
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @return ApiResponse&lt;List&lt;TrackerItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TrackerItem>> getTrackerItemsWithHttpInfo(Integer baselineId, TrackerItemsRequest trackerItemsRequest) throws ApiException {
        okhttp3.Call localVarCall = getTrackerItemsValidateBeforeCall(baselineId, trackerItemsRequest, null);
        Type localVarReturnType = new TypeToken<List<TrackerItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tracker items (asynchronously)
     * API can be used for fetching basic information of tracker items
     * @param baselineId  (optional)
     * @param trackerItemsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTrackerItemsAsync(Integer baselineId, TrackerItemsRequest trackerItemsRequest, final ApiCallback<List<TrackerItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackerItemsValidateBeforeCall(baselineId, trackerItemsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TrackerItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
